server:
  port: ${SPRING_PORT:8084}
  address: ${SPRING_ADDRESS:0.0.0.0}

spring:
  application:
    name: ${SPRING_APPLICATION_NAME:social_pro_be}
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  security:
    user:
      name: ${SPRING_SECURITY_USER_NAME}
      password: ${SPRING_SECURITY_USER_PASSWORD}
    roles: ${SPRING_SECURITY_ROLES:ACTUATOR}
  datasource:
    jdbc-url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: ${SPRING_DATASOURCE_DRIVER:com.mysql.cj.jdbc.Driver}
    hikari:
      pool-name: ${SPRING_DATASOURCE_HIKARI_POOL_NAME:SpringBootBoilerplateHikariPool}
  jpa:
    database-platform: ${SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.MySQLDialect}
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
    show-sql: ${SPRING_JPA_SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: ${SPRING_JPA_FORMAT_SQL:true}
    open-in-view: false
  jta:
    enabled: false
  logstash:
    host: ${SPRING_LOGSTASH_HOST}
    port: ${SPRING_LOGSTASH_PORT}
  flyway:
    url: ${SPRING_FLYWAY_URL}
    user: ${SPRING_FLYWAY_USER}
    password: ${SPRING_FLYWAY_PASSWORD}
    locations: ${SPRING_FLYWAY_LOCATION:classpath:db/migration}
    baseline-on-migrate: true
    enabled: ${SPRING_FLYWAY_ENABLED:true}
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST}
    port: ${SPRING_RABBITMQ_PORT}
    username: ${SPRING_RABBITMQ_USERNAME}
    password: ${SPRING_RABBITMQ_PASSWORD}
  quartz:
    job-store-type: ${SPRING_QUARTZ_JOB_STORE_TYPE:jdbc}
    jdbc:
      initialize-schema: ${SPRING_QUARTZ_INITIALIZE_SCHEMA:always}
    properties:
      org:
        quartz:
          datasource:
            jdbcUrl: ${SPRING_QUARTZ_DATASOURCE_URL}
            username: ${SPRING_QUARTZ_DATASOURCE_USERNAME}
            password: ${SPRING_QUARTZ_DATASOURCE_PASSWORD}
            driver-class-name: ${SPRING_QUARTZ_DATASOURCE_DRIVER:com.mysql.cj.jdbc.Driver}
          jobStore:
            isClustered: ${SPRING_QUARTZ_JOB_STORE_CLUSTERED:true}
            dataSource: ${SPRING_QUARTZ_DATASOURCE:quartzDataSource}
            class: ${SPRING_QUARTZ_JOB_STORE_CLASS:org.quartz.impl.jdbcjobstore.JobStoreTX}
            tablePrefix: ${SPRING_QUARTZ_TABLE_PREFIX:QRTZ_}
          instanceName: ${SPRING_QUARTZ_INSTANCE_NAME:MyScheduler}
        threadPool:
          threadCount: ${SPRING_QUARTZ_THREAD_COUNT:10}

logging:
  level:
    org.flywaydb: ${LOGGING_LEVEL_FLYWAY:DEBUG}

bcrypt:
  cost: ${BCRYPT_COST:10}

jwt:
  secret: ${JWT_SECRET}
  issuer: ${JWT_ISSUER}
  audience: ${JWT_AUDIENCE}
  access-token-expiration: ${JWT_ACCESS_TOKEN_EXPIRATION}
  refresh-token-expiration: ${JWT_REFRESH_TOKEN_EXPIRATION}

springdoc:
  api-docs:
    path: ${SPRINGDOC_API_DOCS_PATH:/v3/api-docs}
    enabled: ${SPRINGDOC_API_DOCS_ENABLED:true}
  swagger-ui:
    path: ${SPRINGDOC_SWAGGER_UI_PATH:/swagger-ui.html}
    enabled: ${SPRINGDOC_SWAGGER_UI_ENABLED:true}
    tags-sorter: ${SPRINGDOC_SWAGGER_UI_TAGS_SORTER:alpha}
    operations-sorter: ${SPRINGDOC_SWAGGER_UI_OPERATIONS_SORTER:method}
  packages-to-scan: ${SPRINGDOC_PACKAGES_TO_SCAN:com.spring.social_pro.backend.controller, com.spring.social_pro.backend.base}
  paths-to-match:
    - ${SPRINGDOC_PATHS_TO_MATCH:/api/**}

cors:
  max-age: ${CORS_MAX_AGE:3600}
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5000}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE}

openapi:
  info:
    title: ${OPENAPI_TITLE:My API Documentation}
    version: ${OPENAPI_VERSION:1.0}
    description: ${OPENAPI_DESCRIPTION:This is a sample API documentation for My Application}
    contact:
      name: ${OPENAPI_CONTACT_NAME:Nguyá»…n Vinh Quang}
      email: ${OPENAPI_CONTACT_EMAIL:quangnv1911@gmail.com}
    license:
      name: Apache 2.0
      url: http://springdoc.org
  servers:
    - url: ${OPENAPI_SERVERS_URL_1:http://localhost:8084}
      description: ${OPENAPI_SERVERS_DESCRIPTION_1:Local Development Server}
    - url: ${OPENAPI_SERVERS_URL_2}
      description: ${OPENAPI_SERVERS_DESCRIPTION_2:Production Server}

management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINT_EXPOSURE_INCLUDE:*}
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    elasticsearch:
      enabled: false

info:
  app:
    name: ${ACTUATOR_INFO_APP_NAME:Spring Actuator Demo}
    description: ${ACTUATOR_INFO_APP_DESCRIPTION:Demonstrating Spring Actuator with YAML configuration}
    version: ${ACTUATOR_INFO_APP_VERSION:1.0.0}

telegram:
  bot:
    token: ${TELEGRAM_BOT_TOKEN}
  group:
    chatId: ${TELEGRAM_BOT_GROUP}

keydb:
  host: ${KEYDB_HOST}
  port: ${KEYDB_PORT}
  ssl: ${KEYDB_SSL}

otp:
  expire_time: ${OTP_EXPIRE_TIME:5}
  length: ${OTP_LENGTH:6}

payment:
  token: ${PAYMENT_TOKEN}
  expire_time: ${PAYMENT_EXPIRE_TIME}

# Prefix endpoint
apiPrefix: ${API_PREFIX:/api/v1}

# Email service
email-endpoint:
  send: ${EMAIL_ENDPOINT_SEND}